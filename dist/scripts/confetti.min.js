// Confetti - A Vanilla JS Library
// Source: https://www.kirilv.com/canvas-confetti/

// Hilfsfunktion zum Konvertieren von Hex zu RGB
function hexToRgb(hex) {
    // Entferne das #-Zeichen, falls vorhanden
    hex = hex.replace('#', '');
    
    // Konvertiere zu RGB
    const r = parseInt(hex.substring(0, 2), 16);
    const g = parseInt(hex.substring(2, 4), 16);
    const b = parseInt(hex.substring(4, 6), 16);
    
    return [r, g, b];
}

function confetti(options) {
  var count = options?.particleCount || 100;
  var defaults = {
    particleCount: count,
    angle: options?.angle || 90,
    spread: options?.spread || 45,
    startVelocity: options?.startVelocity || 45,
    decay: options?.decay || 0.9,
    gravity: options?.gravity || 1,
    drift: options?.drift || 0,
    ticks: options?.ticks || 200,
    x: options?.x || 0.5,
    y: options?.y || 0.5,
    shapes: options?.shapes || ['square', 'circle'],
    zIndex: options?.zIndex || 100,
    colors: options?.colors || [
      '#26ccff',
      '#a25afd',
      '#ff5e7e',
      '#88ff5a',
      '#fcff42',
      '#ffa62d',
      '#ff36ff'
    ],
    disableForReducedMotion: options?.disableForReducedMotion || false,
    scalar: options?.scalar || 1
  };

  var canvas = document.createElement('canvas');
  canvas.style.position = 'fixed';
  canvas.style.top = '0px';
  canvas.style.left = '0px';
  canvas.style.pointerEvents = 'none';
  canvas.style.zIndex = defaults.zIndex;
  document.body.appendChild(canvas);

  var context = canvas.getContext('2d');
  var width = window.innerWidth;
  var height = window.innerHeight;

  canvas.width = width;
  canvas.height = height;

  var particles = [];
  for(var i = 0; i < defaults.particleCount; i++) {
    particles.push({
      x: defaults.x * width,
      y: defaults.y * height,
      angle: defaults.angle * (Math.PI / 180),
      spread: defaults.spread * (Math.PI / 180),
      velocity: defaults.startVelocity,
      color: defaults.colors[Math.floor(Math.random() * defaults.colors.length)],
      shape: defaults.shapes[Math.floor(Math.random() * defaults.shapes.length)],
      size: 10,
      decay: defaults.decay,
      gravity: defaults.gravity,
      drift: defaults.drift,
      scalar: defaults.scalar,
      ticks: defaults.ticks,
      currentTick: 0
    });
  }

  function animate() {
    context.clearRect(0, 0, width, height);
    particles.forEach((particle, index) => {
      particle.currentTick++;
      
      if(particle.currentTick < particle.ticks) {
        var progress = 1 - (particle.currentTick / particle.ticks);
        
        particle.velocity *= particle.decay;
        particle.x += Math.cos(particle.angle) * particle.velocity + particle.drift;
        particle.y += Math.sin(particle.angle) * particle.velocity + particle.gravity;
        
        context.fillStyle = `rgba(${hexToRgb(particle.color).join(',')},${progress})`;
        context.beginPath();
        
        if(particle.shape === 'circle') {
          context.arc(particle.x, particle.y, particle.size * particle.scalar * progress, 0, Math.PI * 2, false);
        } else {
          context.rect(particle.x, particle.y, particle.size * particle.scalar * progress, particle.size * particle.scalar * progress);
        }
        
        context.closePath();
        context.fill();
      } else {
        particles.splice(index, 1);
      }
    });

    if(particles.length > 0) {
      requestAnimationFrame(animate);
    } else {
      document.body.removeChild(canvas);
    }
  }

  requestAnimationFrame(animate);
}

// Make it available globally
window.confetti = confetti;